name: EC2 Region Scan

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      regionMatrix: ${{ steps.set-matrix.outputs.regionMatrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Download EC2 IP ranges
        run: |
          curl -s https://ip-ranges.amazonaws.com/ip-ranges.json \
            | jq -r '.prefixes[] | select(.service=="EC2") | "\(.region) \(.ip_prefix)"' > ec2_region_cidrs.txt
          echo "AWS EC2 Region/CIDRs:"
          cat ec2_region_cidrs.txt

      - name: Build region-based JSON
        id: set-matrix
        run: |
          # We want something like:
          # {
          #   "us-east-1": ["3.5.140.0/22", "3.5.141.0/22", ...],
          #   "us-west-2": ["35.80.0.0/12", ...],
          #   ...
          # }
          # Then convert that object into an array of objects so each region is one matrix entry.
          # i.e. [ { "region":"us-east-1", "cidrs": [...] }, { "region":"us-west-2", "cidrs":[...] }, ... ]
          
          jqCode='
            reduce inputs as $line (
              {};
              # split line into region + cidr
              . as $obj
              | ($line | split(" ")) as [$r,$c]
              | if $obj[$r] then
                  .[$r] += [$c]
                else
                  .[$r] = [$c]
                end
            )
            # convert object to array of {region, cidrs}
            | to_entries
            | map({ region: .key, cidrs: .value })
          '
          
          matrix=$(cat ec2_region_cidrs.txt | jq -R -s -c "split(\"\\n\") | map(select(length>0)) | $jqCode")
          echo "regionMatrix=$matrix" >> $GITHUB_OUTPUT

  scan:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        entry: ${{ fromJson(needs.prepare.outputs.regionMatrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Print region info
        run: |
          echo "Region: ${{ matrix.entry.region }}"
          echo "CIDRs: ${{ matrix.entry.cidrs }}"

      - name: Create folders
        run: |
          mkdir -p open_ips
          mkdir -p certs

      - name: Scan all CIDRs in ${{ matrix.entry.region }}
        run: |
          region="${{ matrix.entry.region }}"
          # For each CIDR, run ZMap and append the results
          rm -f "open_ips_${region}.csv"
          for cidr in ${{ matrix.entry.cidrs }}; do
            # Because ${{ matrix.entry.cidrs }} is a JSON array, it might look like ["1.2.3.4/24","5.6.7.8/24",...]
            # We'll strip the quotes with 'sed' to get a clean string.
            c=$(echo "$cidr" | sed 's/"//g' | sed 's/,//g' )
            echo "Scanning $c"
            docker run --rm --network=host -v "${{ github.workspace }}":/data sec32/zmap \
              zmap -M tcp_synscan -p 443 -B 100K "$c" \
              -o /data/open_ips_tmp.csv

            cat open_ips_tmp.csv >> "open_ips_${region}.csv"
          done
          echo "Done scanning region $region."
          echo "Unique IPs found in $region: $(sort -u open_ips_${region}.csv | wc -l)"

      - name: Grab TLS certs for ${{ matrix.entry.region }}
        run: |
          region="${{ matrix.entry.region }}"
          # De-duplicate the IP list
          sort -u "open_ips_${region}.csv" > "open_ips_${region}_dedup.csv"
          docker run --rm --network=host -v "${{ github.workspace }}":/data -i sec32/zgrab2 \
            zgrab2 tls --port 443 \
            --input-file=/data/open_ips_${region}_dedup.csv \
            --output-file=/data/certs/certs_${region}.json

      - name: Upload artifact for ${{ matrix.entry.region }}
        uses: actions/upload-artifact@v4
        with:
          name: certs-${{ matrix.entry.region }}
          path: certs/certs_${{ matrix.entry.region }}.json
