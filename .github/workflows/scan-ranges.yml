name: Scan EC2 Ranges

on:
  workflow_dispatch:

jobs:
  scan-ranges:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Adjust workspace permissions
        run: chmod -R 777 "${{ github.workspace }}"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find and process unscanned ranges
        shell: bash
        run: |
          # Setup git configuration
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Function to split large JSON files
          split_results() {
            local input_file="$1"
            local output_dir="$2"
            local chunk_size=80000000  # ~80MB to stay safely under GitHub's limit

            # Create a temporary working directory
            local temp_dir=$(mktemp -d)
            
            # Extract the results array into separate files
            jq -c '.results[]' "$input_file" | split -C "$chunk_size" - "$temp_dir/part-"
            
            # Process each split file into a proper JSON document
            for part in "$temp_dir"/part-*; do
              if [ -f "$part" ]; then
                # Get part number for naming
                local part_num=$(basename "$part" | sed 's/part-//')
                local output_file="$output_dir/results_${part_num}.json"
                
                # Wrap the content in a proper JSON structure
                echo "{\"results\":[" > "$output_file"
                cat "$part" | sed 's/$/,/' | sed '$s/,$//' >> "$output_file"
                echo "]}" >> "$output_file"
                
                echo "Created chunk file: $output_file"
              fi
            done
            
            # Create manifest file
            echo "{\"type\":\"split\",\"files\":[$(ls "$output_dir"/results_*.json | jq -R -s -c 'split("\n")[:-1]')]}" > "$output_dir/manifest.json"
            
            # Cleanup
            rm -rf "$temp_dir"
          }

          # Process each range directory
          find ranges -type d -mindepth 1 -maxdepth 1 | while read -r dir; do
            echo "Processing directory: $dir"
            
            # Skip if already processed
            if [ -f "$dir/manifest.json" ]; then
              echo "Skipping $dir - already processed"
              continue
            fi
            
            # Verify cidr.txt exists
            if [ ! -f "$dir/cidr.txt" ]; then
              echo "Error: cidr.txt not found in $dir"
              continue
            fi
            
            cidr=$(cat "$dir/cidr.txt")
            echo "Processing range: $cidr"
            
            # Create temporary directory
            tmp_dir="$dir/tmp"
            mkdir -p "$tmp_dir"
            
            # Run ZMap scan
            echo "Starting ZMap scan for $cidr"
            docker run --rm --network=host -v "${{ github.workspace }}":/data \
              sec32/zmap zmap -M tcp_synscan -p 443 -B 100K \
              "$cidr" -o "/data/$dir/tmp/open_ips.csv"
            
            if [ -s "$tmp_dir/open_ips.csv" ]; then
              echo "ZMap found open ports, running ZGrab2"
              # Run ZGrab2 with temporary output file
              docker run --rm --network=host -v "${{ github.workspace }}":/data -i \
                sec32/zgrab2 zgrab2 tls --port 443 \
                --input-file="/data/$dir/tmp/open_ips.csv" \
                --output-file="/data/$dir/tmp/full_results.json"
              
              # Split the results if needed
              file_size=$(stat -f%z "$dir/tmp/full_results.json" 2>/dev/null || stat -c%s "$dir/tmp/full_results.json")
              if [ "$file_size" -gt 90000000 ]; then  # 90MB threshold
                echo "Large result file detected, splitting into chunks..."
                split_results "$dir/tmp/full_results.json" "$dir"
              else
                mv "$dir/tmp/full_results.json" "$dir/results.json"
                echo "{\"type\":\"single\",\"file\":\"results.json\"}" > "$dir/manifest.json"
              fi
              
              echo "Completed scanning range: $cidr"
            else
              echo "No open ports found for range: $cidr"
              echo "{\"type\":\"single\",\"file\":\"results.json\"}" > "$dir/manifest.json"
              echo "{\"results\":[]}" > "$dir/results.json"
            fi
            
            # Cleanup temporary files
            rm -rf "$tmp_dir"
            
            # Commit results
            git add "$dir"
            git commit -m "Add scan results for range $cidr"
            
            # Try to push, with retry logic
            for i in {1..3}; do
              if git push; then
                break
              else
                echo "Push failed, attempt $i of 3. Pulling and retrying..."
                git pull --rebase
                sleep 5
              fi
            done
          done
