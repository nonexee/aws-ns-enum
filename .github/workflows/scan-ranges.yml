name: Scan EC2 Ranges

on:
  workflow_dispatch:

jobs:
  scan-ranges:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Adjust workspace permissions
        run: chmod -R 777 "${{ github.workspace }}"

      - name: Find and process unscanned ranges
        shell: bash
        run: |
          # Setup git configuration
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Function to compress and split large files
          handle_large_file() {
            local json_file="$1"
            local dir_path=$(dirname "$json_file")
            local base_name=$(basename "$json_file" .json)
            local archive_name="${base_name}.tar.gz"
            
            echo "Compressing and splitting file: $json_file"
            
            # Create tar.gz archive
            tar -czf "$dir_path/$archive_name" -C "$dir_path" $(basename "$json_file")
            
            # Remove original large file
            rm "$json_file"
            
            # Split the archive into 90MB chunks
            cd "$dir_path"
            split -b 90M "$archive_name" "${archive_name}.part-"
            
            # Remove the original archive
            rm "$archive_name"
            
            # Create manifest file
            echo "{
              \"type\": \"split_compressed\",
              \"format\": \"tar.gz\",
              \"original_name\": \"$(basename "$json_file")\",
              \"parts\": [$(ls "${archive_name}.part-"* | jq -R . | paste -sd,)]
            }" > "${dir_path}/manifest.json"
            
            echo "File has been compressed and split into parts"
          }

          # Process each range directory
          find ranges -type d -mindepth 1 -maxdepth 1 | while read -r dir; do
            echo "Processing directory: $dir"
            
            # Skip if already processed
            if [ -f "$dir/manifest.json" ]; then
              echo "Skipping $dir - already processed"
              continue
            fi
            
            # Verify cidr.txt exists
            if [ ! -f "$dir/cidr.txt" ]; then
              echo "Error: cidr.txt not found in $dir"
              continue
            fi
            
            cidr=$(cat "$dir/cidr.txt")
            echo "Processing range: $cidr"
            
            # Create temporary directory
            tmp_dir="$dir/tmp"
            mkdir -p "$tmp_dir"
            
            # Run ZMap scan
            echo "Starting ZMap scan for $cidr"
            docker run --rm --network=host -v "${{ github.workspace }}":/data \
              sec32/zmap zmap -M tcp_synscan -p 443 -B 100K \
              "$cidr" -o "/data/$dir/tmp/open_ips.csv"
            
            if [ -s "$tmp_dir/open_ips.csv" ]; then
              echo "ZMap found open ports, running ZGrab2"
              docker run --rm --network=host -v "${{ github.workspace }}":/data -i \
                sec32/zgrab2 zgrab2 tls --port 443 \
                --input-file="/data/$dir/tmp/open_ips.csv" \
                --output-file="/data/$dir/certs.json"
              
              # Check file size
              file_size=$(stat -f%z "$dir/certs.json" 2>/dev/null || stat -c%s "$dir/certs.json")
              if [ "$file_size" -gt $((90 * 1024 * 1024)) ]; then
                echo "File size exceeds 90MB, splitting..."
                handle_large_file "$dir/certs.json"
              fi
              
              echo "Completed scanning range: $cidr"
            else
              echo "No open ports found for range: $cidr"
              echo '{"results":[]}' > "$dir/certs.json"
            fi
            
            # Cleanup temporary files
            rm -rf "$tmp_dir"
            
            # Commit results
            git add "$dir"
            git commit -m "Add scan results for range $cidr"
            
            # Try to push with retry logic
            for i in {1..3}; do
              if git push; then
                break
              else
                echo "Push failed, attempt $i of 3. Pulling and retrying..."
                git pull --rebase
                sleep 5
              fi
            done
          done
