name: Scan EC2 Range

on:
  workflow_dispatch:
    inputs:
      start_line:
        description: 'Start processing from line number (1-based)'
        required: true
        type: number
      batch_size:
        description: 'Number of ranges to process'
        required: true
        type: number
        default: 1

jobs:
  scan-range:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Setup workspace
        run: |
          mkdir -p scan_results
          chmod -R 777 "${{ github.workspace }}"

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Process ranges
        run: |
          # Function to split large JSON results into smaller files
          split_results() {
            local input_file=$1
            local base_name=$2
            local chunk_size=1000  # certificates per chunk
            
            echo "Splitting results for $base_name"
            
            # Create directory for this range's results
            mkdir -p "scan_results/$base_name"
            
            # Count total results
            total_results=$(jq '.results | length' "$input_file")
            
            if [ "$total_results" -eq 0 ]; then
              echo "No results to split"
              echo '{"results":[]}' > "scan_results/$base_name/part_0.json"
              return
            fi
            
            # Split into chunks
            for ((i = 0; i < total_results; i += chunk_size)); do
              end=$((i + chunk_size))
              part_num=$(printf "%03d" $((i / chunk_size)))
              
              echo "Creating part $part_num"
              jq -c "{
                results: .results[$i:$end],
                range: .range,
                scan_time: .scan_time,
                part: \"$part_num\",
                total_parts: $(((total_results + chunk_size - 1) / chunk_size))
              }" "$input_file" > "scan_results/$base_name/part_$part_num.json"
              
              # Create individual tar.gz for this part
              tar -czf "scan_results/${base_name}_part${part_num}.tar.gz" \
                -C "scan_results/$base_name" "part_$part_num.json"
            done
            
            # Create manifest file
            echo "{
              \"range\": \"$base_name\",
              \"total_results\": $total_results,
              \"total_parts\": $(((total_results + chunk_size - 1) / chunk_size)),
              \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
            }" > "scan_results/${base_name}_manifest.json"
            
            # Cleanup temporary directory
            rm -rf "scan_results/$base_name"
          }

          # Process each range
          START_LINE=${{ inputs.start_line }}
          END_LINE=$((START_LINE + ${{ inputs.batch_size }} - 1))
          
          readarray -t RANGES < <(awk "NR >= $START_LINE && NR <= $END_LINE" ec2_ranges.txt)
          
          for cidr in "${RANGES[@]}"; do
            [ -z "$cidr" ] && continue
            
            echo "Processing range: $cidr"
            safe_name=$(echo "$cidr" | tr '/' '_')
            
            # Run ZMap scan
            docker run --rm --network=host -v "${{ github.workspace }}":/data \
              sec32/zmap zmap -M tcp_synscan -p 443 -B 100K \
              "$cidr" -o "/data/tmp_open_ips.csv"
            
            if [ -s tmp_open_ips.csv ]; then
              echo "Found open ports, running ZGrab2..."
              docker run --rm --network=host -v "${{ github.workspace }}":/data -i \
                sec32/zgrab2 zgrab2 tls --port 443 \
                --input-file=/data/tmp_open_ips.csv \
                --output-file=/data/tmp_certs.json
              
              # Add metadata to results
              jq --arg range "$cidr" --arg time "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                '. + {range: $range, scan_time: $time}' tmp_certs.json > enriched_certs.json
              
              # Split results if needed
              split_results "enriched_certs.json" "$safe_name"
            else
              echo "No open ports found for range: $cidr"
              mkdir -p "scan_results/$safe_name"
              echo "{
                \"results\": [],
                \"range\": \"$cidr\",
                \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
              }" > "scan_results/${safe_name}_part000.tar.gz"
            fi
            
            # Cleanup temporary files
            rm -f tmp_open_ips.csv tmp_certs.json enriched_certs.json
          done
          
          # Commit results
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add scan_results/
          git commit -m "Add scan results for ranges $START_LINE-$END_LINE"
          git push || {
            git pull --rebase
            git push
          }
