name: Update AWS Nameservers

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-ns:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Generate candidate hostnames
        run: |
          python generate_candidates.py
          echo "Generated $(wc -l < aws_candidates.txt) candidate hostnames."

      - name: Create resolvers file
        run: |
          echo "8.8.8.8" > resolvers.txt
          echo "8.8.4.4" >> resolvers.txt

      - name: Run puredns to resolve candidates
        run: |
          docker run --rm \
            -v "${{ github.workspace }}":/current \
            secsi/puredns resolve \
            -q \
            -r /current/resolvers.txt \
            /current/aws_candidates.txt \
            --write /current/aws_ns_servers.txt

      - name: Upload live nameservers file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: aws_ns_servers.txt
          path: aws_ns_servers.txt

      - name: Commit updated nameservers file
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update aws_ns_servers.txt"
          add: "aws_ns_servers.txt"
          author_name: "github-actions"
          author_email: "github-actions@github.com"

      # ----- Resolve domains to IPs -----
      - name: Resolve domains to IPs
        run: |
          echo "[*] Resolving domains from aws_ns_servers.txt to IPv4 addresses..."
          rm -f aws_ns_ips.txt
          while IFS= read -r domain; do
            [ -z "$domain" ] && continue
            # Resolve the domain using dig and output A records
            dig +short A "$domain"
          done < aws_ns_servers.txt | sort -u > aws_ns_ips.txt
          echo "[*] Unique IPs written to aws_ns_ips.txt:"
          cat aws_ns_ips.txt

      # ----- Run masscan via Docker on port 53 -----
      - name: Run masscan for port 53
        run: |
          echo "[*] Running masscan on port 53..."
          docker run --rm \
            -v "${{ github.workspace }}":/data \
            ilyaglow/masscan \
            -p53 \
            -iL /data/aws_ns_ips.txt \
            -oL /data/open53.txt \
            --wait 10

      # ----- Extract open port 53 IPs -----
      - name: Extract open port 53 IPs
        run: |
          echo "[*] Extracting IPs with port 53 open..."
          grep '^open tcp 53 ' open53.txt | awk '{print $4}' | sort -u > aws_ns_ips_53.txt
          echo "[*] IPs with port 53 open (aws_ns_ips_53.txt):"
          cat aws_ns_ips_53.txt

      - name: Commit scan results
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update scan results for port 53"
          add: |
            aws_ns_ips.txt
            open53.txt
            aws_ns_ips_53.txt
          author_name: "github-actions"
          author_email: "github-actions@github.com"

      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scan Results
          path: |
            aws_ns_ips.txt
            open53.txt
            aws_ns_ips_53.txt
