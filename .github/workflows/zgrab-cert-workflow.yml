name: ZGrab2 Certificate Collection

on:
  workflow_dispatch:
    inputs:
      start_line:
        description: 'Start processing from line number (1-based)'
        required: true
        type: number
      batch_size:
        description: 'Number of ranges to process'
        required: true
        type: number
        default: 1

jobs:
  collect-certs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Setup workspace
        run: |
          mkdir -p cert_results
          chmod -R 777 "${{ github.workspace }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Process ranges with ZGrab2
        run: |
          # Helper function to clean JSON output
          clean_json_output() {
            local infile="$1"
            local outfile="$2"
            jq -c '{
              results: [.[] | select(.data.tls != null) | {
                ip: .ip,
                data: {
                  tls: {
                    status: .data.tls.status,
                    protocol: .data.tls.protocol,
                    result: {
                      handshake_log: {
                        server_hello: .data.tls.result.handshake_log.server_hello,
                        server_certificates: .data.tls.result.handshake_log.server_certificates
                      }
                    }
                  }
                }
              }],
              scan_time: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
            }' "$infile" > "$outfile"
          }

          # Process each range
          START_LINE=${{ inputs.start_line }}
          END_LINE=$((START_LINE + ${{ inputs.batch_size }} - 1))
          
          readarray -t RANGES < <(awk "NR >= $START_LINE && NR <= $END_LINE" ec2_ranges.txt)
          
          for cidr in "${RANGES[@]}"; do
            [ -z "$cidr" ] && continue
            
            echo "Processing range: $cidr"
            safe_name=$(echo "$cidr" | tr '/' '_')
            
            # Check if ZMap results exist
            zmap_result="zmap_results/${safe_name}.json"
            if [ ! -f "$zmap_result" ]; then
              echo "No ZMap results found for $cidr, skipping..."
              continue
            fi
            
            # Create directory for results
            mkdir -p "cert_results/${safe_name}"
            
            # Extract IPs from ZMap results
            jq -r '.ips[]' "$zmap_result" > "tmp_ips.txt"
            
            if [ -s tmp_ips.txt ]; then
              echo "Running ZGrab2 for ${safe_name}..."
              
              # Run ZGrab2 with proper error handling
              if docker run --rm --network=host -v "${{ github.workspace }}":/data -i \
                sec32/zgrab2 zgrab2 tls --port 443 \
                --timeout 10s \
                --input-file=/data/tmp_ips.txt \
                --output-file=/data/tmp_certs.json; then
                
                echo "Processing ZGrab2 results..."
                
                # Clean and transform the results
                clean_json_output "tmp_certs.json" "cert_results/${safe_name}/results.json"
                
                # Create a manifest file
                total_results=$(jq '.results | length' "cert_results/${safe_name}/results.json")
                echo "{
                  \"range\": \"$cidr\",
                  \"total_results\": $total_results,
                  \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
                }" > "cert_results/${safe_name}/manifest.json"
                
                echo "Processed $total_results certificates for $cidr"
              else
                echo "ZGrab2 scan failed for range: $cidr"
                echo "{
                  \"range\": \"$cidr\",
                  \"error\": \"zgrab2_scan_failed\",
                  \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
                }" > "cert_results/${safe_name}/manifest.json"
              fi
            else
              echo "No IPs found in ZMap results for range: $cidr"
              echo "{
                \"range\": \"$cidr\",
                \"total_results\": 0,
                \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
              }" > "cert_results/${safe_name}/manifest.json"
            fi
            
            # Cleanup temporary files
            rm -f tmp_ips.txt tmp_certs.json
          done
          
          # Create summary file
          echo "Creating summary file..."
          find cert_results -name manifest.json -exec cat {} \; | \
            jq -s '{
              scan_time: (now | strftime("%Y-%m-%dT%H:%M:%SZ")),
              ranges_processed: length,
              total_results: (map(.total_results // 0) | add),
              ranges: map({
                range: .range,
                total_results: (.total_results // 0),
                error: .error?,
                scan_time: .scan_time
              })
            }' > cert_results/summary.json
          
          # Commit results
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git add cert_results/ && \
             git commit -m "Add certificate scan results for ranges $START_LINE-$END_LINE" && \
             git push; then
            echo "Successfully committed and pushed results"
          else
            echo "Failed to commit results, trying with rebase..."
            git pull --rebase
            if git push; then
              echo "Successfully pushed results after rebase"
            else
              echo "Failed to push results even after rebase"
              exit 1
            fi
          fi
