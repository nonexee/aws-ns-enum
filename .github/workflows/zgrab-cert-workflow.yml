name: ZGrab2 Certificate Collection

on:
  workflow_dispatch:
    inputs:
      start_line:
        description: 'Start processing from line number (1-based)'
        required: true
        type: number
      batch_size:
        description: 'Number of ranges to process'
        required: true
        type: number
        default: 1

jobs:
  collect-certs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Setup workspace
        run: |
          mkdir -p cert_results
          chmod -R 777 "${{ github.workspace }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Process ranges with ZGrab2
        run: |
          # Helper function to process ZGrab output
          process_zgrab_output() {
            local input_file="$1"
            local output_file="$2"
            jq -c '
              select(.data.tls != null) | {
                ip: .ip,
                tls: {
                  protocol_version: .data.tls.result.handshake_log.server_hello.version.name,
                  cipher_suite: {
                    name: .data.tls.result.handshake_log.server_hello.cipher_suite.name,
                    value: .data.tls.result.handshake_log.server_hello.cipher_suite.value
                  },
                  certificate_details: {
                    validity: {
                      start: .data.tls.result.handshake_log.server_certificates.certificate.parsed.validity.start,
                      end: .data.tls.result.handshake_log.server_certificates.certificate.parsed.validity.end
                    },
                    issuer: {
                      common_name: .data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.common_name[0],
                      organization: .data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.organization[0],
                      country: .data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.country[0]
                    },
                    subject: {
                      common_name: .data.tls.result.handshake_log.server_certificates.certificate.parsed.subject.common_name[0]
                    },
                    public_key: {
                      algorithm: .data.tls.result.handshake_log.server_certificates.certificate.parsed.subject_key_info.key_algorithm.name,
                      length: .data.tls.result.handshake_log.server_certificates.certificate.parsed.subject_key_info.rsa_public_key.length
                    },
                    extensions: {
                      basic_constraints: {
                        is_ca: .data.tls.result.handshake_log.server_certificates.certificate.parsed.extensions.basic_constraints.is_ca
                      },
                      key_usage: {
                        digital_signature: .data.tls.result.handshake_log.server_certificates.certificate.parsed.extensions.key_usage.digital_signature,
                        key_encipherment: .data.tls.result.handshake_log.server_certificates.certificate.parsed.extensions.key_usage.key_encipherment
                      },
                      subject_alt_name: {
                        dns_names: .data.tls.result.handshake_log.server_certificates.certificate.parsed.extensions.subject_alt_name.dns_names
                      }
                    },
                    security_features: {
                      ocsp_stapling: .data.tls.result.handshake_log.server_hello.ocsp_stapling,
                      secure_renegotiation: .data.tls.result.handshake_log.server_hello.secure_renegotiation,
                      extended_master_secret: .data.tls.result.handshake_log.server_hello.extended_master_secret
                    },
                    signature: {
                      algorithm: .data.tls.result.handshake_log.server_certificates.certificate.parsed.signature.signature_algorithm.name,
                      valid: .data.tls.result.handshake_log.server_certificates.certificate.parsed.signature.valid
                    }
                  },
                  security_audit: {
                    certificate_chain: [
                      .data.tls.result.handshake_log.server_certificates.chain[] | {
                        issuer_common_name: .parsed.issuer.common_name[0],
                        valid: (if .parsed.signature.valid == null then true else .parsed.signature.valid end)
                      }
                    ],
                    browser_trusted: .data.tls.result.handshake_log.server_certificates.validation.browser_trusted
                  }
                }
              }
            ' "$input_file" | jq -s '{
              certificates: .,
              total_count: length,
              scan_time: now | strftime("%Y-%m-%dT%H:%M:%SZ")
            }' > "$output_file"
          }

          # Process each range
          START_LINE=${{ inputs.start_line }}
          END_LINE=$((START_LINE + ${{ inputs.batch_size }} - 1))
          
          readarray -t RANGES < <(awk "NR >= $START_LINE && NR <= $END_LINE" ec2_ranges.txt)
          
          for cidr in "${RANGES[@]}"; do
            [ -z "$cidr" ] && continue
            
            echo "Processing range: $cidr"
            safe_name=$(echo "$cidr" | tr '/' '_')
            
            # Check if ZMap results exist
            zmap_result="zmap_results/${safe_name}.json"
            if [ ! -f "$zmap_result" ]; then
              echo "No ZMap results found for $cidr, skipping..."
              continue
            fi
            
            # Create directory for results
            mkdir -p "cert_results/${safe_name}"
            
            # Extract IPs from ZMap results
            jq -r '.ips[]' "$zmap_result" > "tmp_ips.txt"
            
            if [ -s tmp_ips.txt ]; then
              echo "Running ZGrab2 for ${safe_name}..."
              
              # Run ZGrab2 with proper error handling
              if docker run --rm --network=host -v "${{ github.workspace }}":/data -i \
                sec32/zgrab2 zgrab2 tls --port 443 \
                --timeout 10s \
                --input-file=/data/tmp_ips.txt \
                --output-file=/data/tmp_certs.json; then
                
                echo "Processing ZGrab2 results..."
                process_zgrab_output "tmp_certs.json" "cert_results/${safe_name}/certs.json"
                
                # Create summary for this range
                total_certs=$(jq '.total_count' "cert_results/${safe_name}/certs.json")
                browser_trusted=$(jq '[.certificates[].tls.security_audit.browser_trusted] | map(select(. == true)) | length' "cert_results/${safe_name}/certs.json")
                
                echo "{
                  \"range\": \"$cidr\",
                  \"total_certificates\": $total_certs,
                  \"browser_trusted_certificates\": $browser_trusted,
                  \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
                }" > "cert_results/${safe_name}/summary.json"
                
                echo "Found $total_certs certificates ($browser_trusted browser-trusted) for $cidr"
              else
                echo "ZGrab2 scan failed for range: $cidr"
                echo "{
                  \"range\": \"$cidr\",
                  \"error\": \"zgrab2_scan_failed\",
                  \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
                }" > "cert_results/${safe_name}/summary.json"
              fi
            else
              echo "No IPs found in ZMap results for range: $cidr"
              echo "{
                \"range\": \"$cidr\",
                \"total_certificates\": 0,
                \"browser_trusted_certificates\": 0,
                \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
              }" > "cert_results/${safe_name}/summary.json"
            fi
            
            # Cleanup temporary files
            rm -f tmp_ips.txt tmp_certs.json
          done
          
          # Create global summary
          echo "Creating global summary..."
          find cert_results -name summary.json -exec cat {} \; | \
            jq -s '{
              scan_time: (now | strftime("%Y-%m-%dT%H:%M:%SZ")),
              ranges_processed: length,
              total_certificates: (map(.total_certificates // 0) | add),
              browser_trusted_certificates: (map(.browser_trusted_certificates // 0) | add),
              ranges: .
            }' > cert_results/global_summary.json
          
          # Commit results
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add cert_results/
          if git commit -m "Add certificate scan results for ranges $START_LINE-$END_LINE"; then
            git push || {
              git pull --rebase
              git push
            }
          fi
