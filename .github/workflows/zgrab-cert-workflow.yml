name: ZGrab2 Certificate Collection

on:
  workflow_dispatch:
    inputs:
      start_line:
        description: 'Start processing from line number (1-based)'
        required: true
        type: number
      batch_size:
        description: 'Number of ranges to process'
        required: true
        type: number
        default: 1

jobs:
  collect-certs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Configure Git
        run: |
          # Set git config with explicit user details
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          # Ensure we're on the right branch
          git fetch origin
          git reset --hard origin/main

      - name: Setup workspace
        run: |
          mkdir -p cert_results
          chmod -R 777 "${{ github.workspace }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gzip

      - name: Process ranges with ZGrab2
        run: |
          process_zgrab_output() {
            local input_file="$1"
            local results_dir="$2"
            
            if [ ! -s "$input_file" ]; then
              echo '{
                "certificates": [],
                "total_count": 0,
                "scan_time": "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"
              }' > "${results_dir}/certs.json"
              return
            fi
            
            echo "Processing certificates..."
            local temp_json="${results_dir}/temp_certs.json"
            
            # Process and create initial JSON
            jq -c '[inputs | select(.data != null and .data.tls != null) |
              select(.data.tls.result.handshake_log.server_certificates.certificate.parsed.subject.common_name[0] != null) |
              select(.data.tls.result.handshake_log.server_certificates.certificate.parsed.subject.common_name[0] != "") | {
                ip: .ip,
                tls: {
                  protocol_version: (.data.tls.result.handshake_log.server_hello.version.name // null),
                  cipher_suite: {
                    name: (.data.tls.result.handshake_log.server_hello.cipher_suite.name // null),
                    value: (.data.tls.result.handshake_log.server_hello.cipher_suite.value // null)
                  },
                  certificate_details: {
                    validity: {
                      start: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.validity.start // null),
                      end: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.validity.end // null)
                    },
                    issuer: {
                      common_name: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.common_name[0] // null),
                      organization: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.organization[0] // null),
                      country: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.country[0] // null)
                    },
                    subject: {
                      common_name: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.subject.common_name[0] // null)
                    },
                    public_key: {
                      algorithm: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.subject_key_info.key_algorithm.name // null),
                      length: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.subject_key_info.rsa_public_key.length // null)
                    }
                  },
                  security_audit: {
                    certificate_chain: [
                      .data.tls.result.handshake_log.server_certificates.chain[]? | 
                      select(. != null) | {
                        issuer_common_name: (.parsed.issuer.common_name[0] // null),
                        valid: (.parsed.signature.valid // false)
                      }
                    ],
                    browser_trusted: (.data.tls.result.handshake_log.server_certificates.validation.browser_trusted // false)
                  }
                }
              }] | {
                certificates: .,
                total_count: length,
                scan_time: "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"
              }' "$input_file" > "$temp_json"

            # Check file size and compress if needed
            local file_size=$(stat -f%z "$temp_json" 2>/dev/null || stat -c%s "$temp_json")
            local size_mb=$((file_size / 1024 / 1024))
            
            echo "Results file is ${size_mb}MB"
            if [ $size_mb -gt 10 ]; then
                echo "Compressing large results file..."
                gzip -9c "$temp_json" > "${results_dir}/certs.json.gz"
                jq '{
                    total_count: .total_count,
                    scan_time: .scan_time,
                    compressed: true,
                    original_size_mb: '$size_mb'
                }' "$temp_json" > "${results_dir}/certs.json"
                rm -f "$temp_json"
            else
                mv "$temp_json" "${results_dir}/certs.json"
            fi
          }

          START_LINE=${{ inputs.start_line }}
          END_LINE=$((START_LINE + ${{ inputs.batch_size }} - 1))
          
          while IFS= read -r cidr; do
            [ -z "$cidr" ] && continue
            
            echo "Processing range: $cidr"
            safe_name=$(echo "$cidr" | tr '/' '_')
            results_dir="cert_results/${safe_name}"
            mkdir -p "$results_dir"
            
            # Check if ZMap results exist
            zmap_result="zmap_results/${safe_name}.json"
            if [ ! -f "$zmap_result" ]; then
              echo "No ZMap results found for $cidr, skipping..."
              continue
            fi
            
            # Extract IPs from ZMap results
            jq -r '.ips[]?' "$zmap_result" > "tmp_ips.txt" 2>/dev/null
            
            if [ -s tmp_ips.txt ]; then
              echo "Running ZGrab2 for ${safe_name}..."
              
              if docker run --rm --network=host -v "${{ github.workspace }}":/data -i \
                sec32/zgrab2 zgrab2 tls --port 443 \
                --timeout 10s \
                --input-file=/data/tmp_ips.txt \
                --output-file=/data/tmp_certs.json; then
                
                process_zgrab_output "tmp_certs.json" "$results_dir"
                
                if [ -f "${results_dir}/certs.json" ]; then
                  total_certs=$(jq '.total_count' "${results_dir}/certs.json")
                  is_compressed=$(jq -r '.compressed // false' "${results_dir}/certs.json")
                  
                  echo "{
                    \"range\": \"$cidr\",
                    \"total_certificates\": $total_certs,
                    \"compressed\": $is_compressed,
                    \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
                  }" > "${results_dir}/summary.json"
                  
                  echo "Processed $total_certs certificates for $cidr"
                  
                  # Stage and commit the results
                  git add "${results_dir}/certs.json"*
                  git add "${results_dir}/summary.json"
                  
                  if git commit -m "Add certificate scan results for $cidr"; then
                    # Try to push, with retries
                    for i in {1..3}; do
                      if git push origin main; then
                        break
                      else
                        echo "Push failed, attempt $i of 3. Pulling latest changes..."
                        git pull --rebase origin main
                      fi
                    done
                  fi
                else
                  echo "Failed to create output file for $cidr"
                fi
              else
                echo "ZGrab2 scan failed for range: $cidr"
              fi
            else
              echo "No IPs found in ZMap results for range: $cidr"
            fi
            
            # Cleanup temporary files
            rm -f tmp_ips.txt tmp_certs.json
          done < <(awk "NR >= $START_LINE && NR <= $END_LINE" ec2_ranges.txt)
