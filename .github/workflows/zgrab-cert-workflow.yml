name: ZGrab2 Certificate Collection

on:
  workflow_dispatch:
    inputs:
      start_line:
        description: 'Start processing from line number (1-based)'
        required: true
        type: number
      batch_size:
        description: 'Number of ranges to process'
        required: true
        type: number
        default: 1

jobs:
  collect-certs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Setup workspace
        run: |
          mkdir -p cert_results
          chmod -R 777 "${{ github.workspace }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Process ranges with ZGrab2
        run: |
          process_zgrab_output() {
            local input_file="$1"
            local output_file="$2"
            
            if [ ! -s "$input_file" ]; then
              echo "Empty or missing input file: $input_file"
              echo '{
                "certificates": [],
                "total_count": 0,
                "scan_time": "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"
              }' > "$output_file"
              return
            fi
            
            echo "Processing certificates..."
            
            # Create a temporary file for processed results
            local temp_file="temp_processed.json"
            : > "$temp_file"
            
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                echo "$line" | jq -c '
                  select(.data != null and .data.tls != null) | {
                    ip: .ip,
                    tls: {
                      protocol_version: (.data.tls.result.handshake_log.server_hello.version.name // null),
                      cipher_suite: {
                        name: (.data.tls.result.handshake_log.server_hello.cipher_suite.name // null),
                        value: (.data.tls.result.handshake_log.server_hello.cipher_suite.value // null)
                      },
                      certificate_details: {
                        validity: {
                          start: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.validity.start // null),
                          end: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.validity.end // null)
                        },
                        issuer: {
                          common_name: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.common_name[0] // null),
                          organization: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.organization[0] // null),
                          country: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.issuer.country[0] // null)
                        },
                        subject: {
                          common_name: (.data.tls.result.handshake_log.server_certificates.certificate.parsed.subject.common_name[0] // null)
                        }
                      }
                    }
                  }' >> "$temp_file" || true
              fi
            done < "$input_file"
            
            if [ -s "$temp_file" ]; then
              jq -s '{
                certificates: .,
                total_count: length,
                scan_time: "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"
              }' "$temp_file" > "$output_file"
              rm -f "$temp_file"
            else
              echo '{
                "certificates": [],
                "total_count": 0,
                "scan_time": "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"
              }' > "$output_file"
            fi
          }

          # Process each range
          START_LINE=${{ inputs.start_line }}
          END_LINE=$((START_LINE + ${{ inputs.batch_size }} - 1))
          
          while IFS= read -r cidr; do
            [ -z "$cidr" ] && continue
            
            echo "Processing range: $cidr"
            safe_name=$(echo "$cidr" | tr '/' '_')
            
            # Check if ZMap results exist
            zmap_result="zmap_results/${safe_name}.json"
            if [ ! -f "$zmap_result" ]; then
              echo "No ZMap results found for $cidr, skipping..."
              continue
            fi
            
            # Create directory for results
            mkdir -p "cert_results/${safe_name}"
            
            # Extract IPs from ZMap results
            jq -r '.ips[]?' "$zmap_result" > "tmp_ips.txt" 2>/dev/null
            
            if [ -s tmp_ips.txt ]; then
              echo "Running ZGrab2 for ${safe_name}..."
              
              if docker run --rm --network=host -v "${{ github.workspace }}":/data -i \
                sec32/zgrab2 zgrab2 tls --port 443 \
                --timeout 10s \
                --input-file=/data/tmp_ips.txt \
                --output-file=/data/tmp_certs.json; then
                
                process_zgrab_output "tmp_certs.json" "cert_results/${safe_name}/certs.json"
                
                if [ -f "cert_results/${safe_name}/certs.json" ]; then
                  total_certs=$(jq '.total_count' "cert_results/${safe_name}/certs.json")
                  echo "{
                    \"range\": \"$cidr\",
                    \"total_certificates\": $total_certs,
                    \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
                  }" > "cert_results/${safe_name}/summary.json"
                else
                  echo "Failed to create output file for $cidr"
                fi
              else
                echo "ZGrab2 scan failed for range: $cidr"
              fi
            else
              echo "No IPs found in ZMap results for range: $cidr"
            fi
            
            # Cleanup temporary files
            rm -f tmp_ips.txt tmp_certs.json
          done < <(awk "NR >= $START_LINE && NR <= $END_LINE" ec2_ranges.txt)
          
          # Commit results
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add cert_results/ || true
          git commit -m "Add certificate scan results for ranges $START_LINE-$END_LINE" || true
          git push || {
            git pull --rebase
            git push
          }
