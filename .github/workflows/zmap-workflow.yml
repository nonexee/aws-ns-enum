name: ZMap Port 443 Scan

on:
  workflow_dispatch:
    inputs:
      start_line:
        description: 'Start processing from line number (1-based)'
        required: true
        type: number
      batch_size:
        description: 'Number of ranges to process'
        required: true
        type: number
        default: 1

jobs:
  zmap-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup workspace
        run: |
          mkdir -p zmap_results
          chmod -R 777 "${{ github.workspace }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch origin
          git reset --hard origin/main

      - name: Process ranges with ZMap
        run: |
          # Helper function to process ZMap results
          process_zmap_results() {
            local result_file="$1"
            local cidr="$2"
            local timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            
            # Convert raw IPs to JSON array
            jq -Rn '
              [inputs | select(length>0)]
            ' < tmp_open_ips.csv > tmp_ips.json
            
            # Create JSON output with proper structure
            jq -n \
              --arg cidr "$cidr" \
              --arg time "$timestamp" \
              --slurpfile ips tmp_ips.json \
              '{
                range: $cidr,
                scan_time: $time,
                total_ips: ($ips[0] | length),
                ips: $ips[0]
              }' > "$result_file"
          }

          START_LINE=${{ inputs.start_line }}
          END_LINE=$((START_LINE + ${{ inputs.batch_size }} - 1))
          
          # Process each range
          while IFS= read -r cidr; do
            [ -z "$cidr" ] && continue
            
            echo "Processing range: $cidr"
            safe_name=$(echo "$cidr" | tr '/' '_')
            result_file="zmap_results/${safe_name}.json"
            
            echo "Running ZMap scan for $cidr"
            if timeout 360m docker run --rm --network=host -v "${{ github.workspace }}":/data \
              sec32/zmap zmap -M tcp_synscan -p 443 -B 100K \
              --cooldown-time=2 \
              "$cidr" -o "/data/tmp_open_ips.csv"; then
              
              if [ -s tmp_open_ips.csv ]; then
                echo "Found open ports, processing results..."
                process_zmap_results "$result_file" "$cidr"
                
                # Get and display results
                total_ips=$(jq '.total_ips' "$result_file")
                echo "Scan completed successfully for $cidr - Found $total_ips active hosts"
                
              else
                echo "No open ports found for range: $cidr"
                echo "{
                  \"range\": \"$cidr\",
                  \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
                  \"total_ips\": 0,
                  \"ips\": []
                }" > "$result_file"
              fi
            else
              echo "ZMap scan failed for range: $cidr"
              echo "{
                \"range\": \"$cidr\",
                \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
                \"error\": \"scan_timeout\",
                \"total_ips\": 0,
                \"ips\": []
              }" > "$result_file"
            fi
            
            # Cleanup temporary files
            rm -f tmp_open_ips.csv tmp_ips.json
            
            # Add to summary and commit
            if [ -f "$result_file" ]; then
              # Create or update summary file
              if [ ! -f "zmap_results/summary.json" ]; then
                echo '{"scans":[], "last_updated": ""}' > "zmap_results/summary.json"
              fi
              
              # Update summary with atomic operation
              jq --arg range "$cidr" \
                 --arg time "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                 --arg total "$(jq '.total_ips' "$result_file")" \
                '.scans += [{
                  range: $range,
                  scan_time: $time,
                  total_ips: ($total|tonumber)
                }] | .last_updated = $time' "zmap_results/summary.json" > "zmap_results/summary.json.tmp" && \
              mv "zmap_results/summary.json.tmp" "zmap_results/summary.json"
              
              # Commit changes
              git add "$result_file" "zmap_results/summary.json"
              if git commit -m "Add ZMap scan results for $cidr"; then
                git pull --rebase origin main || {
                  echo "Failed to rebase, attempting merge..."
                  git pull origin main
                }
                git push origin main || echo "Failed to push changes for $cidr"
              fi
            fi
          done < <(awk "NR >= $START_LINE && NR <= $END_LINE" ec2_ranges.txt)
