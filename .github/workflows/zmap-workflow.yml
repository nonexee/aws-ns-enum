name: ZMap Port 443 Scan

on:
  workflow_dispatch:
    inputs:
      batch_size:
        description: 'Number of ranges to process in this run'
        required: true
        type: number
        default: 5

jobs:
  zmap-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup workspace
        run: |
          mkdir -p zmap_results
          mkdir -p .github/running_scans
          chmod -R 777 "${{ github.workspace }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config --local gc.auto 0
          git config --local core.autocrlf false
          git fetch origin

      - name: Find next available ranges
        id: range_finder
        run: |
          # Create empty ranges file
          echo "[]" > ranges_to_scan.json
          
          # Get list of completed scans
          completed_ranges=()
          if [ -f "zmap_results/summary.json" ]; then
            readarray -t completed_ranges < <(jq -r '.scans[].range' zmap_results/summary.json)
          fi
          
          # Get list of currently running scans
          running_ranges=()
          for f in .github/running_scans/*; do
            if [ -f "$f" ]; then
              readarray -t current_running < <(cat "$f")
              running_ranges+=("${current_running[@]}")
            fi
          done
          
          # Create running scans file for this workflow
          echo "" > ".github/running_scans/workflow_${{ github.run_id }}.txt"
          
          # Counter for ranges found
          ranges_found=0
          
          # Process each range from the full list
          while IFS= read -r cidr; do
            [ -z "$cidr" ] && continue
            
            # Skip if already completed
            if [[ " ${completed_ranges[@]} " =~ " ${cidr} " ]]; then
              continue
            fi
            
            # Skip if currently being processed
            if [[ " ${running_ranges[@]} " =~ " ${cidr} " ]]; then
              continue
            fi
            
            # Add to our batch if we haven't reached the limit
            if [ $ranges_found -lt ${{ inputs.batch_size }} ]; then
              echo "$cidr" >> ".github/running_scans/workflow_${{ github.run_id }}.txt"
              jq --arg cidr "$cidr" '. += [$cidr]' ranges_to_scan.json > ranges_to_scan.json.tmp
              mv ranges_to_scan.json.tmp ranges_to_scan.json
              ranges_found=$((ranges_found + 1))
            else
              break
            fi
            
          done < ec2_ranges.txt
          
          # Set output
          echo "ranges_file=ranges_to_scan.json" >> $GITHUB_OUTPUT
          echo "ranges_found=$ranges_found" >> $GITHUB_OUTPUT
          
          # Commit running scans file
          git add ".github/running_scans/workflow_${{ github.run_id }}.txt"
          git commit -m "Add running scans for workflow ${{ github.run_id }}"
          git push origin main

      - name: Process ranges with ZMap
        if: steps.range_finder.outputs.ranges_found > 0
        run: |
          # Helper function to process ZMap results
          process_zmap_results() {
            local result_file="$1"
            local cidr="$2"
            local timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            
            jq -Rn '[inputs | select(length>0)]' < tmp_open_ips.csv > tmp_ips.json
            
            jq -n \
              --arg cidr "$cidr" \
              --arg time "$timestamp" \
              --slurpfile ips tmp_ips.json \
              '{
                range: $cidr,
                scan_time: $time,
                total_ips: ($ips[0] | length),
                ips: $ips[0]
              }' > "$result_file"
          }

          # Helper function for git operations
          commit_changes() {
            local cidr="$1"
            local max_retries=5
            local retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              git fetch origin main
              
              branch_name="scan-${RANDOM}"
              git checkout -b "$branch_name" origin/main
              
              git add "$result_file" "zmap_results/summary.json"
              
              if git commit -m "Add ZMap scan results for $cidr"; then
                if git push origin "$branch_name":main; then
                  git checkout main
                  git branch -D "$branch_name"
                  return 0
                fi
              fi
              
              git checkout main
              git branch -D "$branch_name"
              sleep $((2 ** retry_count))
              retry_count=$((retry_count + 1))
            done
            
            echo "Failed to commit changes after $max_retries attempts"
            return 1
          }
          
          # Read ranges to scan
          readarray -t ranges < <(jq -r '.[]' ranges_to_scan.json)
          
          # Process each range
          for cidr in "${ranges[@]}"; do
            echo "Processing range: $cidr"
            safe_name=$(echo "$cidr" | tr '/' '_')
            result_file="zmap_results/${safe_name}.json"
            
            echo "Running ZMap scan for $cidr"
            if timeout 360m docker run --rm --network=host -v "${{ github.workspace }}":/data \
              sec32/zmap zmap -M tcp_synscan -p 443 -B 100K \
              --cooldown-time=2 \
              "$cidr" -o "/data/tmp_open_ips.csv"; then
              
              if [ -s tmp_open_ips.csv ]; then
                echo "Found open ports, processing results..."
                process_zmap_results "$result_file" "$cidr"
                
                total_ips=$(jq '.total_ips' "$result_file")
                echo "Scan completed successfully for $cidr - Found $total_ips active hosts"
                
              else
                echo "No open ports found for range: $cidr"
                echo "{
                  \"range\": \"$cidr\",
                  \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
                  \"total_ips\": 0,
                  \"ips\": []
                }" > "$result_file"
              fi
            else
              echo "ZMap scan failed for range: $cidr"
              echo "{
                \"range\": \"$cidr\",
                \"scan_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
                \"error\": \"scan_timeout\",
                \"total_ips\": 0,
                \"ips\": []
              }" > "$result_file"
            fi
            
            rm -f tmp_open_ips.csv tmp_ips.json
            
            if [ -f "$result_file" ]; then
              if [ ! -f "zmap_results/summary.json" ]; then
                echo '{"scans":[], "last_updated": ""}' > "zmap_results/summary.json"
              fi
              
              jq --arg range "$cidr" \
                 --arg time "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                 --arg total "$(jq '.total_ips' "$result_file")" \
              '.scans += [{
                range: $range,
                scan_time: $time,
                total_ips: ($total|tonumber)
              }] | .last_updated = $time' "zmap_results/summary.json" > "zmap_results/summary.json.tmp" && \
              mv "zmap_results/summary.json.tmp" "zmap_results/summary.json"
              
              commit_changes "$cidr" || echo "Failed to push changes for $cidr"
            fi
          done

      - name: Cleanup running scans file
        if: always()
        run: |
          git fetch origin main
          git checkout main
          rm -f ".github/running_scans/workflow_${{ github.run_id }}.txt"
          git add ".github/running_scans/workflow_${{ github.run_id }}.txt"
          git commit -m "Remove running scans for workflow ${{ github.run_id }}"
          git push origin main || echo "Failed to cleanup running scans file"

      - name: Trigger next batch if more ranges available
        if: steps.range_finder.outputs.ranges_found == inputs.batch_size
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.name,
              workflow_id: 'zmap-workflow.yml',
              ref: 'main',
              inputs: {
                batch_size: '${{ inputs.batch_size }}'
              }
            });
